plugins {
   id 'java'
   id 'application'
}

repositories {
    maven { 
        url 'https://www.cs.odu.edu/~zeil/mavenrepo/'
    }
    mavenCentral()
}

sourceSets.main.java.srcDirs = ['src']

jar {
   archiveFileName = 'assignment.jar'
}

def mainclass = 'Omega7'
application {
    mainClass = mainclass
}

test {
    ignoreFailures = true
    useJUnitPlatform()
}
// Add code-grader on target test

dependencies {
    implementation 'edu.odu.cs.zeil:code-grader:+'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
}

task clearGrades (type: Delete) {
	 delete 'build/grades'
}

task codeGrader(type: JavaExec, dependsOn: [jar, compileTestJava, clearGrades]) {
  classpath = sourceSets.main.runtimeClasspath
  mainClass = 'edu.odu.cs.zeil.codegrader.run.CLI'

  args '-suite', 'Tests', 
       '-submissions', '.',
       '-inPlace',
       '-recording', 'build'
}

task copyGraderReport1(type: Copy, dependsOn: codeGrader) {
    from 'build/grades/'
    include '*.html'
    into 'build'
}

task copyGraderReport2(type: Copy, dependsOn: copyGraderReport1) {
    from 'build/grades/'
    include '*.txt'
    into 'build'
}

task autotests (dependsOn: ['copyGraderReport1', 'copyGraderReport2']) {
    doLast {
        File buildDir = new File("build")
        def userName = "*"
        for (File file: buildDir.listFiles()) {
            def name = file.getName()
            if (name.endsWith(".html")) {
                userName = name.substring(0, name.length()-5)
            }
        }
        println '** The grade report is in build/' + userName + '.html or build/' + userName + '.txt '
        println '   Other details can be found in the Tests directory **'
    }
}

task tests(dependsOn: ['test', 'jar']) {
  doLast {
    File testsDir = new File("Tests")
    for (File testCase: testsDir.listFiles()) {
        if (testCase.isDirectory() && !testCase.getName().startsWith('unit')) {
            def caseName = testCase.getName()
            def jarFile = project.file('build/libs/assignment.jar')
            def inputFile = project.file('Tests/' + caseName + '/test.in')
            def outputFile = project.file('Tests/' + caseName + '/test.out')
            def expectedFile = project.file('Tests/' + caseName + '/' + caseName + '.expected')
            def params = []
            def shell = 'sh'
            def shellArg = '-c'
            if (!File.separator.equals('/')) {
                shell = 'cmd'
                shellArg = '/C'
            }
            project.exec {
                commandLine  shell, shellArg, 'java -cp ' +
                   jarFile.toString() + ' ' + mainclass +
                   ' < ' + inputFile.toString() +
                   ' > ' +  outputFile.toString()
            }
            def actual = outputFile.text
            actual = actual.replace("\r", "")
            def expected = expectedFile.text
            if (actual.equals(expected)) {
                println('Passed test ' + caseName)
            } else {
                println('Failed test ' + caseName)
            }
        }
    }
  }
}


clean.doLast {
    File testsDir = new File("Tests")
    for (File testCase: testsDir.listFiles()) {
        if (testCase.isDirectory()) {
            for (File file: testCase.listFiles()) {
                def name = file.getName()
                if (name.endsWith(".err")
                    || name.endsWith(".message")
                    || name.endsWith(".out")
                    || name.endsWith(".score")
                    || name.endsWith(".time")
                    ) {
                    file.delete()
                }
            }
        }
    }
}

